{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"maSMP Project","text":"<p>machine-actionable Software Management Plans</p> <p> </p> <p> </p> <p> </p>"},{"location":"#description","title":"Description","text":"<p>This project corresponds to an extension of the Research Data Alliance (RDA) machine-actionable Data Management Plan (maDMP) application profile and its corresponding DMP Common Standard ontology (DCSO) in order to cover the case of ELIXIR Software Management Plans (SMPs). Similar to DMPs, SMPs help formalize a set of structures and goals that ensure the software is accessible and reusable in the short, medium and long term. Although targeting the life sciences community, most of the elements of the ELIXIR SMPs are domain agnostic and could be used by other communities as well. DMPs and SMPs can be presented as text-based documents, sometimes guided by a set of questions corresponding to key points related to the lifecycle of either data or software. The RDA DMP Common Standards working group defined a maDMP to overcome limitations of text-based documents. We propose a similar path for the ELIXIR SMPs so they turn into machine-actionable SMPs (maSMPs).</p> <p>Additional Information available at our GitHub repository.</p> <p>Ontology releases are available at DOI:10.5281/zenodo.7806638 while usage guidance (aka profiles, e.g., minimum, recommended and optional properties with cardinality) at DOI:10.5281/zenodo.10582120. The current release corresponds to vr.2.1.0 for types and properties and to vr2.1.1 for profiles. This release includes four types: OuputManagementPlan, SoftwareManagementPlan, SoftwareRunAction and SoftwareTestAction, and additional properties for schema:CreativeWork, schema:SoftwareApplication and schema:SoftwareSourceCode. Profiles are provided for: SoftwareManagementPlan, SoftwareRunAction, SoftwareTestAction, schema:SoftwareApplication and schema:SoftwareSourceCode. We have reuse elements from schema.org, Codemeta and Bioschemas</p> <p>maSMP types and maSMP profiles can be visualized in the DDE platform. We also provide embedded pages of the DDE views here, see menu on the left. The corresponding files are in the GitHub repo, types and properties vr 2.1.0, also as TTL, and corresponding profiles vr2.1.1.</p>"},{"location":"#project-layout","title":"Project Layout","text":"<p>maSMP Timeline</p> <p></p>"},{"location":"#relevant-background-sources","title":"Relevant background sources","text":"<ul> <li>RDA machine-actionable Data Management Plan (maDMP)</li> <li>ELIXIR Software Management Plans (SMPs)</li> <li>Practical guide to Software Management Plans</li> <li>Crosswalks from May 2023 and December 2023</li> <li>Five Minutes to Write a Software Management Plan \u2013 A Machine-actionable Approach to Simplify the Creation of SMPs</li> </ul>"},{"location":"about/","title":"About","text":"About us <p> A metadata model containing the required metadata items for an maSMP has been established in the form of an ontology. The software management planning entities that are included in the metadata model include the SMP itself, software source code, software releases, documentation, authors, and their connections. With a few of our own additions, we primarily utilize terms from schema.org and DCSO.</p>"},{"location":"about/#team","title":"Team","text":"<ul> <li>Leyla Jael Castro, garcia-castro@zbmed.de</li> <li>Olga Giraldo</li> <li>Lukas Geist</li> <li>Nelson Qui\u00f1ones</li> <li>Dhwani Solanki</li> <li>Dietrich Rebholz-Schuhmann</li> </ul> <p>CITATION file available</p>"},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>This project is part of the NFDI4DataScience project funded by the German Research Foundation (DFG), project number 460234259. This project received funding from the European Union\u2019s Horizon 2020 research and innovation programme under grant agreement No 101017536 and its initial phase (from 2022.12.01 to 2023.05.31) was part of the Research Data Alliance and European Open Science Cloud Future call 2022. This project has been supported by the Good Practices Focus Group part of the ELIXIR Tools Platform. Part of the work presented here has been developed during ELIXIR BioHackathon Europe 2022 and 2023, and NFDI4DS hackathon on maSMPs at ZB MED 2023.</p>"},{"location":"about/#contributors","title":"Contributors","text":"<p>We acknowledge feedback received from ELIXIR Tools Platform Good Practices Focus Group (Renato Alves, Dimitrios Bampalikis, Jos\u00e9 M.Fern\u00e1ndez ORCID:0000-0002-4806-5140, Eva Mart\u00edn del Pico ORCID:0000-0001-8324-2897, Fotis Psomopoulos ORCID:0000-0002-0222-4273, and Allegra Via ORCID:0000-0002-3398-5462), and from participants in the NFDI4DS hackathon on maSMPs at ZB MED 2023 (Esteban Gonzalez ORCID:0000-0003-4112-6825, Yves Vincent Grossmann ORCID:0000-0002-2880-8947, Carlos Utrilla Guerrero ORCID:0000-0002-9994-1462, Thomas Pronk ORCID:0000-0001-9334-7190, David Wallace ORCID:0000-0001-8958-4601, J\u00fcrgen Windeck ORCID:0000-0003-1909-4353)</p>"},{"location":"maSMP_Schema/","title":"maSMP Schema","text":""},{"location":"maSMP_Schema/#masmp-metadata-schema-representation","title":"maSMP - Metadata schema representation","text":"<p>We have defined a metadata schema in the form of an ontology representing metadata elements for a maSMP. The metadata schema includes entities (colored boxes), involved in software management planning; such as an SMP itself, software source code, software release, documentation, authors and their relations. We are reusing terms mainly from Schema.org, Bioschemas and from DCSO , with some few additions of our own.</p> <p>Software Source Code and Software Release share most of the object properties (i.e., those that point to another object rather than to a simple type such as a number) but they correspond to different software concepts. While the source code reflects the current status of a software and can be continuously changing, a software release corresponds to a frozen copy of a particular version. As the source code evolves, shared elements can differ, e.g., new authors can get involved. This changing nature of source code together with the release cycle are important aspects captured by the maSMPs that otherwise might not be evident in text-based questionnaires. An overview of concepts used in the metadata schema for maSMPs is depicted in above schema representation.</p> <p> </p>"},{"location":"maSMP_Schema/#masmp-types-and-namespace","title":"maSMP Types and namespace","text":"<p>All types and properties for the maSMP metadata schema can be found at the maSMP DDE namespace. The Data Discovery Engine (DDE) platform promotes FAIR data-sharing best practices by facilitating the creation and hosting of metadata schemas based on schema.org. We also provide embedded pages for types and profiles (i.e., usage recommendation on properties from the parent types). </p> <p>Note of caution: We intend to push types and profiles to Bioschemas so a broader community can provide feedback and adopt the maSMP approach. We use these pages, the GitHub repository and the DDE namespace as staging areas for development. We will keep here the latest version and history of previous versions. We will also maintain the DDE namespace up-to-date. Using one or the other should be equivalent but we suggest using the version hosted at Bioschemas.</p> <p>The current list of maSMP types and location within the schema.org hierarchy is shown below: * schema:Thing -&gt; schema:CreativeWork -&gt; maSMP:OutputManagemenPlan (new type with properties): This type aims at representing output management plans, e.g., software management plans * schema:Thing -&gt; schema:CreativeWork -&gt; maSMP:OutputManagemenPlan -&gt; maSMP:SoftwareManagementPlan (new type with properties): Output management plan we are most interested in, i.e., Software Management Plans * schema:Thing -&gt; schema:Action -&gt; maSMP:SoftwareRunAction (new type with properties): This type aims at representing executions of a software handled by a maSMP:SoftwareManagementPlan. The execution we are most interested in is the one provided by the own developers, showcasing how to use the software with a particular input to obtain a particular known output. Third-party developers and users should ideally use this execution together with corresonding documentation to use the software as intended by its developers. * schema:Thing -&gt; schema:Action -&gt; maSMP:SoftwareTestAction (new type with properties): This type aims at representing testing done on a software. From the maSMP perspective, depending on how much information about testing should be collected, naming the tests done as schema:Text (or even better as schema:DefinedTerm using a controlled vocabulary on software testing --Wikidata have a good collection) may be enough</p> <p>We also add some new properties to types in schema.org * schema:Thing -&gt; schema:CreativeWork, e.g., intendedUse and ethicalLegalSocial * schema:Thing -&gt; schema:CreativeWork -&gt; SoftwareApplication * schema:Thing -&gt; schema:CreativeWork -&gt; SoftwareSourceCode</p> <p>The maSMP profiles provide some guidance on what properties are more relevant and how to use them * maSMPProfiles:SoftwareManagementPlanProfile * maSMPProfiles:SoftwareRunActionProfile * maSMPProfiles:SoftwareTestActionProfile * maSMPProfiles:SoftwareApplicationProfile * maSMPProfiles:SoftwareSourceCodeProfile</p>"},{"location":"Profiles/SoftwareApplication/","title":"SoftwareApplication","text":""},{"location":"Profiles/SoftwareManagementPlan/","title":"SoftwareManagementPlan","text":""},{"location":"Profiles/SoftwareRunAction/","title":"SoftwareRunAction","text":""},{"location":"Profiles/SoftwareSourceCode/","title":"SoftwareSourceCode","text":""},{"location":"Profiles/SoftwareTestAction/","title":"SoftwareTestAction","text":""},{"location":"Types/OutputManagementPlan/","title":"OutputManagementPlan","text":""},{"location":"Types/SoftwareManagementPlan/","title":"SoftwareManagementPlan","text":""},{"location":"Types/SoftwareRunAction/","title":"SoftwareRunAction","text":""},{"location":"Types/SoftwareTestAction/","title":"SoftwareTestAction","text":""}]}